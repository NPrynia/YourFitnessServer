//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YourFitnessServer.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class YourFitnessEntities4 : DbContext
    {
        public YourFitnessEntities4()
            : base("name=YourFitnessEntities4")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Dificulty> Dificulty { get; set; }
        public virtual DbSet<Exercise> Exercise { get; set; }
        public virtual DbSet<ExerciseWorkout> ExerciseWorkout { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<HistoryChange> HistoryChange { get; set; }
        public virtual DbSet<HistoryWorkoutUser> HistoryWorkoutUser { get; set; }
        public virtual DbSet<LikeNewsUser> LikeNewsUser { get; set; }
        public virtual DbSet<LikeWorkout> LikeWorkout { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<MuscleType> MuscleType { get; set; }
        public virtual DbSet<MuscleTypeExercise> MuscleTypeExercise { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<NewsComment> NewsComment { get; set; }
        public virtual DbSet<ReviewUserTrainer> ReviewUserTrainer { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Service> Service { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Workout> Workout { get; set; }
        public virtual DbSet<WorkoutReaction> WorkoutReaction { get; set; }
        public virtual DbSet<WorkoutType> WorkoutType { get; set; }
        public virtual DbSet<DetailInformationAboutTrainer> DetailInformationAboutTrainer { get; set; }
        public virtual DbSet<DetailInformationAboutWorkout> DetailInformationAboutWorkout { get; set; }
        public virtual DbSet<TopNewsForAWeek> TopNewsForAWeek { get; set; }
    
        [DbFunction("YourFitnessEntities4", "returnHistoryChangeUser")]
        public virtual IQueryable<returnHistoryChangeUser_Result> returnHistoryChangeUser(Nullable<int> iDUser)
        {
            var iDUserParameter = iDUser.HasValue ?
                new ObjectParameter("IDUser", iDUser) :
                new ObjectParameter("IDUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<returnHistoryChangeUser_Result>("[YourFitnessEntities4].[returnHistoryChangeUser](@IDUser)", iDUserParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> getDurationWorkoutInSecProc(Nullable<int> iDWrkout)
        {
            var iDWrkoutParameter = iDWrkout.HasValue ?
                new ObjectParameter("IDWrkout", iDWrkout) :
                new ObjectParameter("IDWrkout", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getDurationWorkoutInSecProc", iDWrkoutParameter);
        }
    
        public virtual ObjectResult<qtyHourOnMuscleForUser_Result> qtyHourOnMuscleForUser(Nullable<int> iDUser)
        {
            var iDUserParameter = iDUser.HasValue ?
                new ObjectParameter("IDUser", iDUser) :
                new ObjectParameter("IDUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<qtyHourOnMuscleForUser_Result>("qtyHourOnMuscleForUser", iDUserParameter);
        }
    
        public virtual ObjectResult<qtyHourWorkoutUser_Result> qtyHourWorkoutUser(Nullable<int> iDUser, Nullable<System.DateTime> firstDate, Nullable<System.DateTime> secondDate)
        {
            var iDUserParameter = iDUser.HasValue ?
                new ObjectParameter("IDUser", iDUser) :
                new ObjectParameter("IDUser", typeof(int));
    
            var firstDateParameter = firstDate.HasValue ?
                new ObjectParameter("FirstDate", firstDate) :
                new ObjectParameter("FirstDate", typeof(System.DateTime));
    
            var secondDateParameter = secondDate.HasValue ?
                new ObjectParameter("SecondDate", secondDate) :
                new ObjectParameter("SecondDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<qtyHourWorkoutUser_Result>("qtyHourWorkoutUser", iDUserParameter, firstDateParameter, secondDateParameter);
        }
    
        public virtual ObjectResult<qtyMuscleInWorkout_Result> qtyMuscleInWorkout(Nullable<int> iDWorkout)
        {
            var iDWorkoutParameter = iDWorkout.HasValue ?
                new ObjectParameter("IDWorkout", iDWorkout) :
                new ObjectParameter("IDWorkout", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<qtyMuscleInWorkout_Result>("qtyMuscleInWorkout", iDWorkoutParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
